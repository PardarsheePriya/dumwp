// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v71riRuApXUtRMoadrNkLo
// Component: lLLvXoD4KlOk
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AdditionalSeoData from "../../AdditionalSeoData"; // plasmic-import: -gkf1XoWfci_/component
import DummyWpContainer from "../../DummyWpContainer"; // plasmic-import: 1MK_4ANsnZoy/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import DummyWpFooter from "../../DummyWpFooter"; // plasmic-import: lHAr2mrvTa45/component
import { useScreenVariants as useScreenVariantsttPhCg0GXwHk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: TTPhCg0gXwHK/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: v71riRuApXUtRMoadrNkLo/projectcss
import sty from "./PlasmicContact.module.css"; // plasmic-import: lLLvXoD4KlOk/css

createPlasmicElementProxy;

export const PlasmicContact__VariantProps = new Array();

export const PlasmicContact__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContact__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsttPhCg0GXwHk()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicContact.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicContact.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicContact.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicContact.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicContact.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicContact.pageMetadata.description}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicContact.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicContact.pageMetadata.ogImageSrc}
        />

        <link rel="canonical" href={PlasmicContact.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <AdditionalSeoData
            data-plasmic-name={"additionalSeoData"}
            data-plasmic-override={overrides.additionalSeoData}
            className={classNames("__wab_instance", sty.additionalSeoData)}
          />

          <DummyWpContainer
            data-plasmic-name={"dummyWpContainer"}
            data-plasmic-override={overrides.dummyWpContainer}
            className={classNames("__wab_instance", sty.dummyWpContainer)}
            querydata={(() => {
              try {
                return $ctx.query.item;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"contents"}
              data-plasmic-override={overrides.contents}
              className={classNames(projectcss.all, sty.contents)}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(
                  projectcss.all,
                  sty.freeBox,
                  "form-container"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oszFw,
                    hasVariant(globalVariants, "screen", "bp1360")
                      ? "about-para"
                      : undefined
                  )}
                >
                  {"Maybe you wanna get in touch?"}
                </div>
                <Embed
                  data-plasmic-name={"contactForm"}
                  data-plasmic-override={overrides.contactForm}
                  className={classNames("__wab_instance", sty.contactForm)}
                  code={
                    hasVariant(globalVariants, "screen", "bp966")
                      ? '<body>\r\n  <form id="contactForm" class="contactform">\r\n    Hey, my name is\r\n    <label class="input-sizer">\r\n      <input required type="text" name="name" size="4" placeholder="John Doe" class="form-name" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>\r\n    and you can reach me at\r\n    <label class="input-sizer">\r\n      <input required type="email" pattern="^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$" name="email" size="4" placeholder="john@mail.com" class="form-email" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>. I want to contact you about\r\n    <label class="input-sizer">\r\n      <input required type="text" name="subject" size="4" placeholder="Subject" autocomplete="off" class="form-subject" oninput="this.parentNode.dataset.value = this.value">\r\n    </label> and here are the details for it\r\n    <label class="input-sizer stacked">\r\n      <textarea required name="body" placeholder="type your query here" rows="1" style="resize: vertical;" class="form-textarea" oninput="this.parentNode.dataset.value = this.value"></textarea>\r\n    </label>\r\n\r\n    <button type="submit" class="button">Submit</button>\r\n\r\n  </form>\r\n\r\n  <!-- Load reCAPTCHA API -->\r\n  <script src="https://www.google.com/recaptcha/api.js?render=6Le-kq0cAAAAAOv330Fstv6ZFpt2G2oY1ZyRQuyq"></script>\r\n\r\n  <script>\r\n\r\n    var thankYouText = document.querySelector(".form-thankyou-txt")\r\n    var contactForm = document.querySelector("#contactForm")\r\n    var formContainer = document.querySelector(".form-container")\r\n\r\n    contactForm.addEventListener("submit", async (event) => {\r\n      event.preventDefault();\r\n\r\n      var url = "https://dwp-cf.uo.workers.dev";\r\n\r\n      // Get form data\r\n      var form = event.target;\r\n      var formData = new URLSearchParams();\r\n\r\n      // Execute reCAPTCHA\r\n      grecaptcha.ready(async () => {\r\n        try {\r\n          var token = await grecaptcha.execute("6Le-kq0cAAAAAOv330Fstv6ZFpt2G2oY1ZyRQuyq", { action: "submit" });\r\n\r\n          // Append form fields\r\n          formData.append("name", form?.name?.value);\r\n          formData.append("email", form?.email?.value);\r\n          formData.append("subject", form?.subject?.value);\r\n          formData.append("body", form?.body?.value);\r\n          formData.append("recaptcha_token", token);\r\n\r\n          // Send POST request\r\n          var response = await fetch(url, {\r\n            method: "POST",\r\n            headers: {\r\n              "Content-Type": "application/x-www-form-urlencoded",\r\n            },\r\n            body: formData.toString(),\r\n          });\r\n\r\n          // Use response.text() if the response is not JSON\r\n          var data = await response.text();\r\n          thankYouText.classList.remove("hide");\r\n          formContainer.classList.add("hide");\r\n        } catch (error) {\r\n          console.error("Error:", error);\r\n          alert("Failed to submit the form.");\r\n        }\r\n      });\r\n    });\r\n  </script>\r\n</body>\r\n\r\n<style>\r\n  form {\r\n      display: block;\r\n      margin-top: 0em;\r\n      unicode-bidi: isolate;\r\n  }\r\n\r\n\r\n  .contactform {\r\n      font-family: "Courier Prime", monospace;\r\n      font-size: 34px;\r\n      color: #1d1d28;\r\n      line-height: 1.4;\r\n  }\r\n\r\n  .input-sizer input, .input-sizer textarea, .input-sizer::after {\r\n      width: auto;\r\n      min-width: 224px;\r\n      grid-area: 1 / 2;\r\n      font: inherit;\r\n      padding: 0 8px;\r\n      margin: 0;\r\n      resize: none;\r\n      background: 0 0;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border: none;\r\n      outline: 0;\r\n      color:#fc6a51;\r\n      border-bottom: 3px solid rgb(29 29 40 / 10%);\r\n  }\r\n\r\n  .input-sizer input::placeholder,\r\n  .input-sizer textarea::placeholder {\r\n    color: #fca697;\r\n  }\r\n\r\n  .input-sizer {\r\n      display: inline-grid;\r\n      /* padding: .25em .5em; */\r\n      padding: .25em 0em !important;\r\n  }\r\n\r\n  .input-sizer::after {\r\n      /* content: attr(data-value) " "; */\r\n      visibility: hidden;\r\n      white-space: pre-wrap;\r\n  }\r\n\r\n  .contactform button {\r\n      display: block;\r\n      background: #1d1d28;\r\n      color: #fc6a51;\r\n      font-size: 19px;\r\n      height: 56px;\r\n      font-weight: 700;\r\n      border: none;\r\n      width: 280px;\r\n      margin-top: 24px;\r\n      border-radius: 2px;\r\n      cursor:pointer;\r\n  }\r\n\r\n  @media screen and (max-width: 375px) {\r\n    .contactform button {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .grecaptcha-badge{\r\n    z-index:99999;\r\n  }\r\n\r\n  .hide{\r\n    display:none;\r\n  }\r\n\r\n  .form-thankyou-txt,\r\n  .contactform, .contactform form input, .contactform form textarea {\r\n    font-size: calc(22px + 12*((100vw - 320px) / 543));\r\n  }\r\n</style>\r\n'
                      : '<body>\r\n  <form id="contactForm" class="contactform">\r\n    Hey, my name is\r\n    <label class="input-sizer">\r\n      <input required type="text" name="name" size="4" placeholder="John Doe" class="form-name" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>\r\n    and you can reach me at\r\n    <label class="input-sizer">\r\n      <input required type="email" pattern="^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$" name="email" size="4" placeholder="john@mail.com" class="form-email" oninput="this.parentNode.dataset.value = this.value">\r\n    </label>. I want to contact you about\r\n    <label class="input-sizer">\r\n      <input required type="text" name="subject" size="4" placeholder="Subject" autocomplete="off" class="form-subject" oninput="this.parentNode.dataset.value = this.value">\r\n    </label> and here are the details for it\r\n    <label class="input-sizer stacked">\r\n      <textarea required name="body" placeholder="type your query here" rows="1" style="resize: vertical;" class="form-textarea" oninput="this.parentNode.dataset.value = this.value"></textarea>\r\n    </label>\r\n\r\n    <button type="submit" class="button">Submit</button>\r\n\r\n  </form>\r\n\r\n  <!-- Load reCAPTCHA API -->\r\n  <script src="https://www.google.com/recaptcha/api.js?render=6Le-kq0cAAAAAOv330Fstv6ZFpt2G2oY1ZyRQuyq"></script>\r\n\r\n  <script>\r\n\r\n    var thankYouText = document.querySelector(".form-thankyou-txt")\r\n    var contactForm = document.querySelector("#contactForm")\r\n    var formContainer = document.querySelector(".form-container")\r\n\r\n    contactForm.addEventListener("submit", async (event) => {\r\n      event.preventDefault();\r\n\r\n      var url = "https://dwp-cf.uo.workers.dev";\r\n\r\n      // Get form data\r\n      var form = event.target;\r\n      var formData = new URLSearchParams();\r\n\r\n      // Execute reCAPTCHA\r\n      grecaptcha.ready(async () => {\r\n        try {\r\n          var token = await grecaptcha.execute("6Le-kq0cAAAAAOv330Fstv6ZFpt2G2oY1ZyRQuyq", { action: "submit" });\r\n\r\n          // Append form fields\r\n          formData.append("name", form?.name?.value);\r\n          formData.append("email", form?.email?.value);\r\n          formData.append("subject", form?.subject?.value);\r\n          formData.append("body", form?.body?.value);\r\n          formData.append("recaptcha_token", token);\r\n\r\n          // Send POST request\r\n          var response = await fetch(url, {\r\n            method: "POST",\r\n            headers: {\r\n              "Content-Type": "application/x-www-form-urlencoded",\r\n            },\r\n            body: formData.toString(),\r\n          });\r\n\r\n          // Use response.text() if the response is not JSON\r\n          var data = await response.text();\r\n          thankYouText.classList.remove("hide");\r\n          formContainer.classList.add("hide");\r\n        } catch (error) {\r\n          console.error("Error:", error);\r\n          alert("Failed to submit the form.");\r\n        }\r\n      });\r\n    });\r\n  </script>\r\n</body>\r\n\r\n<style>\r\n  form {\r\n      display: block;\r\n      margin-top: 0em;\r\n      unicode-bidi: isolate;\r\n  }\r\n\r\n\r\n  .contactform {\r\n      font-family: "Courier Prime", monospace;\r\n      font-size: 34px;\r\n      color: #1d1d28;\r\n      line-height: 1.4;\r\n  }\r\n\r\n  .input-sizer input, .input-sizer textarea, .input-sizer::after {\r\n      width: auto;\r\n      min-width: 224px;\r\n      grid-area: 1 / 2;\r\n      font: inherit;\r\n      padding: 0 8px;\r\n      margin: 0;\r\n      resize: none;\r\n      background: 0 0;\r\n      -webkit-appearance: none;\r\n      -moz-appearance: none;\r\n      appearance: none;\r\n      border: none;\r\n      outline: 0;\r\n      color:#fc6a51;\r\n      border-bottom: 3px solid rgb(29 29 40 / 10%);\r\n  }\r\n\r\n  .input-sizer input::placeholder,\r\n  .input-sizer textarea::placeholder {\r\n    color: #fca697;\r\n  }\r\n\r\n  .input-sizer {\r\n      display: inline-grid;\r\n      /* padding: .25em .5em; */\r\n      padding: .25em 0em !important;\r\n  }\r\n\r\n  .input-sizer::after {\r\n      /* content: attr(data-value) " "; */\r\n      visibility: hidden;\r\n      white-space: pre-wrap;\r\n  }\r\n\r\n  .contactform button {\r\n      display: block;\r\n      background: #1d1d28;\r\n      color: #fc6a51;\r\n      font-size: 19px;\r\n      height: 56px;\r\n      font-weight: 700;\r\n      border: none;\r\n      width: 280px;\r\n      margin-top: 24px;\r\n      border-radius: 2px;\r\n      cursor:pointer;\r\n  }\r\n\r\n  @media screen and (max-width: 375px) {\r\n    .contactform button {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .grecaptcha-badge{\r\n    z-index:99999;\r\n  }\r\n\r\n  .hide{\r\n    display:none;\r\n  }\r\n\r\n\r\n</style>\r\n'
                  }
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jxyp,
                  "form-thankyou-txt hide"
                )}
              >
                {
                  "Thank you for getting in touch with us, we\u2019ll reach out to you shortly."
                }
              </div>
            </div>
          </section>
          <DummyWpFooter
            data-plasmic-name={"dummyWpFooter"}
            data-plasmic-override={overrides.dummyWpFooter}
            className={classNames("__wab_instance", sty.dummyWpFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "additionalSeoData",
    "dummyWpContainer",
    "section",
    "contents",
    "freeBox",
    "contactForm",
    "dummyWpFooter"
  ],

  additionalSeoData: ["additionalSeoData"],
  dummyWpContainer: ["dummyWpContainer"],
  section: ["section", "contents", "freeBox", "contactForm"],
  contents: ["contents", "freeBox", "contactForm"],
  freeBox: ["freeBox", "contactForm"],
  contactForm: ["contactForm"],
  dummyWpFooter: ["dummyWpFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContact__ArgProps,
          internalVariantPropNames: PlasmicContact__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    additionalSeoData: makeNodeComponent("additionalSeoData"),
    dummyWpContainer: makeNodeComponent("dummyWpContainer"),
    section: makeNodeComponent("section"),
    contents: makeNodeComponent("contents"),
    freeBox: makeNodeComponent("freeBox"),
    contactForm: makeNodeComponent("contactForm"),
    dummyWpFooter: makeNodeComponent("dummyWpFooter"),
    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "dummywp | Contact Us",
      description:
        "Create free WordPress staging site where you can upload your own plugin and theme to test out things before you make it live on your main site.",
      ogImageSrc:
        "https://site-assets.plasmic.app/70bd5841dbee59b55a44fb215e176a76.png",
      canonical: "https://dwpv1.plasmic.run/contact"
    }
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
