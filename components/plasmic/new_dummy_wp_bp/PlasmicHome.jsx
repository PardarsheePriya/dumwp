// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: v71riRuApXUtRMoadrNkLo
// Component: qbkAqZS0juQd
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AdditionalSeoData from "../../AdditionalSeoData"; // plasmic-import: -gkf1XoWfci_/component
import DummyWpContainer from "../../DummyWpContainer"; // plasmic-import: 1MK_4ANsnZoy/component
import DummyWpFooter from "../../DummyWpFooter"; // plasmic-import: lHAr2mrvTa45/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import CustomSelector from "../../CustomSelector"; // plasmic-import: uWZjqjC_xF90/component
import Checkbox from "../../Checkbox"; // plasmic-import: UNGYLQFnXOan/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { useScreenVariants as useScreenVariantsttPhCg0GXwHk } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: TTPhCg0gXwHK/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: v71riRuApXUtRMoadrNkLo/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: qbkAqZS0juQd/css
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: gRCMvuFQokj-/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: TqAjub0D9hjU/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: XyDZ2fTKSVh3/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: -P86FMuNyQaY/icon

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array(
  "processingVarient",
  "setupVarient"
);

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "processingVarient",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.processingVarient
      },
      {
        path: "setupVarient",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.setupVarient
      },
      {
        path: "enableWpDebug.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showWpDebug.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "enableScriptDebug.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "disableScriptDebug.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "disablePostDebug.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsttPhCg0GXwHk()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicHome.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHome.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHome.pageMetadata.description}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHome.pageMetadata.ogImageSrc}
        />

        <link rel="canonical" href={PlasmicHome.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            "page",
            {
              [sty.rootprocessingVarient]: hasVariant(
                $state,
                "processingVarient",
                "processingVarient"
              ),
              [sty.rootsetupVarient]: hasVariant(
                $state,
                "setupVarient",
                "setupVarient"
              )
            }
          )}
        >
          <AdditionalSeoData
            data-plasmic-name={"additionalSeoData"}
            data-plasmic-override={overrides.additionalSeoData}
            className={classNames("__wab_instance", sty.additionalSeoData)}
          />

          <DummyWpContainer
            data-plasmic-name={"dummyWpContainer"}
            data-plasmic-override={overrides.dummyWpContainer}
            className={classNames("__wab_instance", sty.dummyWpContainer, {
              [sty.dummyWpContainerprocessingVarient]: hasVariant(
                $state,
                "processingVarient",
                "processingVarient"
              ),
              [sty.dummyWpContainersetupVarient]: hasVariant(
                $state,
                "setupVarient",
                "setupVarient"
              )
            })}
            querydata={(() => {
              try {
                return $ctx.query.item;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <div
            data-plasmic-name={"contents"}
            data-plasmic-override={overrides.contents}
            className={classNames(projectcss.all, sty.contents)}
          >
            <div
              data-plasmic-name={"grid"}
              data-plasmic-override={overrides.grid}
              className={classNames(
                projectcss.all,
                sty.grid,
                "home-contents-grid"
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox__jBoSz)}>
                <Icon3Icon
                  data-plasmic-name={"star1"}
                  data-plasmic-override={overrides.star1}
                  className={classNames(projectcss.all, sty.star1)}
                  role={"img"}
                />

                <Icon3Icon
                  data-plasmic-name={"star2"}
                  data-plasmic-override={overrides.star2}
                  className={classNames(projectcss.all, sty.star2)}
                  role={"img"}
                />

                <Icon3Icon
                  data-plasmic-name={"star3"}
                  data-plasmic-override={overrides.star3}
                  className={classNames(projectcss.all, sty.star3)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ykZus,
                    "selection_effect"
                  )}
                >
                  {hasVariant(globalVariants, "screen", "bp966") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Get FREE WordPress Staging Site";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Get FREE WordPress Staging Site";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : hasVariant(globalVariants, "screen", "bp1360") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Get FREE WordPress Staging Site";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Get FREE WordPress Staging Site";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Get FREE WordPress \nStaging Site";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Get FREE WordPress Staging Site";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___8T7Aa)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"250px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/new_dummy_wp_bp/images/image.svg",
                    fullWidth: 252.737,
                    fullHeight: 12,
                    aspectRatio: 21.061417
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nCSxV,
                    "selection_effect"
                  )}
                >
                  {
                    "Want to test some plugin or theme before installing on your own site? or maybe you want to do something really weird with WordPress installation but don't want to mess up your own installation?"
                  }
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"createSiteButton4"}
                  data-plasmic-override={overrides.createSiteButton4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.createSiteButton4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yh1Lx
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateProcessingVarient"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "processingVarient",
                              operation: 4,
                              value: "processingVarient"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }
                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateProcessingVarient"] != null &&
                        typeof $steps["updateProcessingVarient"] === "object" &&
                        typeof $steps["updateProcessingVarient"].then ===
                          "function"
                      ) {
                        $steps["updateProcessingVarient"] = await $steps[
                          "updateProcessingVarient"
                        ];
                      }
                    }}
                  >
                    {"Create Free Test Site"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3MQI)}
                  />

                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg__jcr62)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateSetupVarient"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "setupVarient",
                              operation: 4
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }
                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSetupVarient"] != null &&
                        typeof $steps["updateSetupVarient"] === "object" &&
                        typeof $steps["updateSetupVarient"].then === "function"
                      ) {
                        $steps["updateSetupVarient"] = await $steps[
                          "updateSetupVarient"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__n8DHi)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xVzNj, "wp_img")}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/new_dummy_wp_bp/images/wpImagePng.png",
                    fullWidth: 966,
                    fullHeight: 954,
                    aspectRatio: undefined
                  }}
                />

                {(
                  hasVariant(globalVariants, "screen", "bp966") ? true : false
                ) ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jUqNe)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "bp480")
                        ? "550px"
                        : "735px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/new_dummy_wp_bp/images/heroSmallSvg.svg",
                      fullWidth: 734.847,
                      fullHeight: 734.847,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
              </div>
            </div>
          </div>
          <DummyWpFooter
            data-plasmic-name={"dummyWpFooter"}
            data-plasmic-override={overrides.dummyWpFooter}
            className={classNames("__wab_instance", sty.dummyWpFooter, {
              [sty.dummyWpFooterprocessingVarient]: hasVariant(
                $state,
                "processingVarient",
                "processingVarient"
              ),
              [sty.dummyWpFootersetupVarient]: hasVariant(
                $state,
                "setupVarient",
                "setupVarient"
              )
            })}
          />

          <div
            data-plasmic-name={"processingContainer"}
            data-plasmic-override={overrides.processingContainer}
            className={classNames(projectcss.all, sty.processingContainer, {
              [sty.processingContainerprocessingVarient]: hasVariant(
                $state,
                "processingVarient",
                "processingVarient"
              ),
              [sty.processingContainersetupVarient]: hasVariant(
                $state,
                "setupVarient",
                "setupVarient"
              )
            })}
          >
            <div
              data-plasmic-name={"processing"}
              data-plasmic-override={overrides.processing}
              className={classNames(projectcss.all, sty.processing, {
                [sty.processingprocessingVarient]: hasVariant(
                  $state,
                  "processingVarient",
                  "processingVarient"
                ),
                [sty.processingsetupVarient]: hasVariant(
                  $state,
                  "setupVarient",
                  "setupVarient"
                )
              })}
            >
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  v: "4.8.0",
                  meta: { g: "LottieFiles AE ", a: "", k: "", d: "", tc: "" },
                  fr: 24,
                  ip: 0,
                  op: 91,
                  w: 1280,
                  h: 720,
                  nm: "Comp 1",
                  ddd: 0,
                  assets: [],
                  layers: [
                    {
                      ddd: 0,
                      ind: 2,
                      ty: 4,
                      nm: "Shape Layer 4",
                      sr: 1,
                      ks: {
                        o: { a: 0, k: 100, ix: 11 },
                        r: { a: 0, k: 0, ix: 10 },
                        p: { a: 0, k: [266, 360, 0], ix: 2 },
                        a: { a: 0, k: [-352, -224.675, 0], ix: 1 },
                        s: { a: 0, k: [100, 100, 100], ix: 6 }
                      },
                      ao: 0,
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ind: 0,
                              ty: "sh",
                              ix: 1,
                              ks: {
                                a: 1,
                                k: [
                                  {
                                    i: { x: 0, y: 1 },
                                    o: { x: 0, y: 0 },
                                    t: 0,
                                    s: [
                                      {
                                        i: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        o: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        v: [
                                          [0, -130.698],
                                          [56.594, -32.674],
                                          [113.188, 65.349],
                                          [-113.188, 65.349]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0.667, y: 1 },
                                    o: { x: 0.333, y: 0 },
                                    t: 20,
                                    s: [
                                      {
                                        i: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        o: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        v: [
                                          [479.5, -137.5],
                                          [479.5, 72.5],
                                          [269.5, 72.5],
                                          [269.5, -137.5]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0, y: 1 },
                                    o: { x: 0, y: 0 },
                                    t: 30,
                                    s: [
                                      {
                                        i: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        o: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        v: [
                                          [479.5, -137.5],
                                          [479.5, 72.5],
                                          [269.5, 72.5],
                                          [269.5, -137.5]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0, y: 1 },
                                    o: { x: 0, y: 0 },
                                    t: 50,
                                    s: [
                                      {
                                        i: [
                                          [0, -56.885],
                                          [56.885, 0],
                                          [0, 56.885],
                                          [-56.885, 0]
                                        ],

                                        o: [
                                          [0, 56.885],
                                          [-56.885, 0],
                                          [0, -56.885],
                                          [56.885, 0]
                                        ],

                                        v: [
                                          [850.837, -31.163],
                                          [747.837, 71.837],
                                          [644.837, -31.163],
                                          [747.837, -134.163]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0.833, y: 0.833 },
                                    o: { x: 0, y: 0 },
                                    t: 60,
                                    s: [
                                      {
                                        i: [
                                          [0, -56.885],
                                          [56.885, 0],
                                          [0, 56.885],
                                          [-56.885, 0]
                                        ],

                                        o: [
                                          [0, 56.885],
                                          [-56.885, 0],
                                          [0, -56.885],
                                          [56.885, 0]
                                        ],

                                        v: [
                                          [850.837, -31.163],
                                          [747.837, 71.837],
                                          [644.837, -31.163],
                                          [747.837, -134.163]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0.833, y: 0.833 },
                                    o: { x: 0.167, y: 0.167 },
                                    t: 63,
                                    s: [
                                      {
                                        i: [
                                          [-3.68, -25.512],
                                          [6.183, -48.357],
                                          [30.906, 14.209],
                                          [-22.468, 18.381]
                                        ],

                                        o: [
                                          [4.461, 30.921],
                                          [-3.269, 25.568],
                                          [-23.42, -10.767],
                                          [19.951, -16.322]
                                        ],

                                        v: [
                                          [385.539, -85.596],
                                          [387.817, 22.683],
                                          [329.094, 34.117],
                                          [260.468, -39.056]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0, y: 1 },
                                    o: { x: 0.167, y: 0.167 },
                                    t: 66,
                                    s: [
                                      {
                                        i: [
                                          [-2.314, -11.701],
                                          [-7.364, -30.616],
                                          [16.904, 0.929],
                                          [-7.843, 10.905]
                                        ],

                                        o: [
                                          [3.095, 15.653],
                                          [2.789, 11.597],
                                          [-11.91, -0.654],
                                          [8.782, -12.211]
                                        ],

                                        v: [
                                          [178.405, -109.827],
                                          [209.864, -7.058],
                                          [213.096, 50.897],
                                          [59.718, 17.037]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    i: { x: 0.667, y: 1 },
                                    o: { x: 0.333, y: 0 },
                                    t: 80,
                                    s: [
                                      {
                                        i: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        o: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        v: [
                                          [0, -130.698],
                                          [56.594, -32.674],
                                          [113.188, 65.349],
                                          [-113.188, 65.349]
                                        ],

                                        c: true
                                      }
                                    ]
                                  },
                                  {
                                    t: 90,
                                    s: [
                                      {
                                        i: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        o: [
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],

                                        v: [
                                          [0, -130.698],
                                          [56.594, -32.674],
                                          [113.188, 65.349],
                                          [-113.188, 65.349]
                                        ],

                                        c: true
                                      }
                                    ]
                                  }
                                ],

                                ix: 2
                              },
                              nm: "Path 1",
                              mn: "ADBE Vector Shape - Group",
                              hd: false
                            },
                            {
                              ty: "st",
                              c: { a: 0, k: [1, 1, 1, 1], ix: 3 },
                              o: { a: 0, k: 100, ix: 4 },
                              w: { a: 0, k: 0, ix: 5 },
                              lc: 1,
                              lj: 1,
                              ml: 4,
                              bm: 0,
                              nm: "Stroke 1",
                              mn: "ADBE Vector Graphic - Stroke",
                              hd: false
                            },
                            {
                              ty: "fl",
                              c: { a: 0, k: [1, 1, 1, 1], ix: 4 },
                              o: { a: 0, k: 100, ix: 5 },
                              r: 1,
                              bm: 0,
                              nm: "Fill 1",
                              mn: "ADBE Vector Graphic - Fill",
                              hd: false
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [-352, -192], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: { a: 0, k: 100, ix: 7 },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],

                          nm: "Polystar 1",
                          np: 3,
                          cix: 2,
                          bm: 0,
                          ix: 1,
                          mn: "ADBE Vector Group",
                          hd: false
                        }
                      ],

                      ip: 0,
                      op: 720,
                      st: 0,
                      bm: 0
                    }
                  ],

                  markers: []
                }}
                className={classNames("__wab_instance", sty.lottie)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gyfu
                )}
              >
                {
                  "now adding some final sauces\nto make it a little juicy and spicy"
                }
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"envitiomentSetupContainer"}
            data-plasmic-override={overrides.envitiomentSetupContainer}
            className={classNames(
              projectcss.all,
              sty.envitiomentSetupContainer,
              "environment-setup-container",
              {
                [sty.envitiomentSetupContainerprocessingVarient]: hasVariant(
                  $state,
                  "processingVarient",
                  "processingVarient"
                ),
                [sty.envitiomentSetupContainersetupVarient]: hasVariant(
                  $state,
                  "setupVarient",
                  "setupVarient"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"setupFormWrapper"}
              data-plasmic-override={overrides.setupFormWrapper}
              className={classNames(
                projectcss.all,
                sty.setupFormWrapper,
                "env-form-wrapper",
                {
                  [sty.setupFormWrapperprocessingVarient]: hasVariant(
                    $state,
                    "processingVarient",
                    "processingVarient"
                  ),
                  [sty.setupFormWrappersetupVarient]: hasVariant(
                    $state,
                    "setupVarient",
                    "setupVarient"
                  )
                }
              )}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__afzo3)}
                onClick={async event => {
                  const $steps = {};
                  $steps["deactivateSetupVarient"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "setupVarient",
                          operation: 6
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["deactivateSetupVarient"] != null &&
                    typeof $steps["deactivateSetupVarient"] === "object" &&
                    typeof $steps["deactivateSetupVarient"].then === "function"
                  ) {
                    $steps["deactivateSetupVarient"] = await $steps[
                      "deactivateSetupVarient"
                    ];
                  }
                }}
              />

              <div
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                className={classNames(projectcss.all, sty.form, {
                  [sty.formsetupVarient]: hasVariant(
                    $state,
                    "setupVarient",
                    "setupVarient"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"titleWrapper"}
                  data-plasmic-override={overrides.titleWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.titleWrapper)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__waj2L
                    )}
                  >
                    {"Environment Setup"}
                  </div>
                  <Icon4Icon
                    className={classNames(projectcss.all, sty.svg___85Dvd)}
                    role={"img"}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"dropdownWrapper"}
                  data-plasmic-override={overrides.dropdownWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.dropdownWrapper)}
                >
                  <CustomSelector
                    className={classNames(
                      "__wab_instance",
                      sty.customSelector__fyW4,
                      {
                        [sty.customSelectorsetupVarient__fyW4KpON]: hasVariant(
                          $state,
                          "setupVarient",
                          "setupVarient"
                        )
                      }
                    )}
                    optionsLoop={[
                      "Latest",
                      "Version 6.5",
                      "Version 6.4",
                      "Version 6.3",
                      "Version 6.2",
                      "Version 6.1",
                      "Version 6.0",
                      "Version 5.9",
                      "Version 5.8"
                    ]}
                    selectLogo2={
                      <Icon10Icon
                        className={classNames(projectcss.all, sty.svg___53Bpy)}
                        role={"img"}
                      />
                    }
                    selectLogo3={
                      <Icon10Icon
                        className={classNames(projectcss.all, sty.svg___8O81B)}
                        role={"img"}
                      />
                    }
                  />

                  <CustomSelector
                    className={classNames(
                      "__wab_instance",
                      sty.customSelector__muTdX,
                      {
                        [sty.customSelectorsetupVarient__muTdXkpON]: hasVariant(
                          $state,
                          "setupVarient",
                          "setupVarient"
                        )
                      }
                    )}
                    optionsLoop={[
                      "Version 8.0",
                      "Version 7.4",
                      "Version 7.3",
                      "Version 7.2"
                    ]}
                    selectLogo2={
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg__bpk5M)}
                        role={"img"}
                      />
                    }
                    selectLogo3={
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg___70Pmz)}
                        role={"img"}
                      />
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"checkboxWrapper"}
                  data-plasmic-override={overrides.checkboxWrapper}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.checkboxWrapper, {
                    [sty.checkboxWrappersetupVarient]: hasVariant(
                      $state,
                      "setupVarient",
                      "setupVarient"
                    )
                  })}
                >
                  <Checkbox
                    data-plasmic-name={"enableWpDebug"}
                    data-plasmic-override={overrides.enableWpDebug}
                    checkLabel={"Enable WP Debug"}
                    className={classNames("__wab_instance", sty.enableWpDebug)}
                    isChecked={
                      generateStateValueProp($state, [
                        "enableWpDebug",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "enableWpDebug",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />

                  <Checkbox
                    data-plasmic-name={"showWpDebug"}
                    data-plasmic-override={overrides.showWpDebug}
                    checkLabel={"Show WP Debug Logs"}
                    className={classNames("__wab_instance", sty.showWpDebug)}
                    isChecked={
                      generateStateValueProp($state, [
                        "showWpDebug",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "showWpDebug",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />

                  <Checkbox
                    data-plasmic-name={"enableScriptDebug"}
                    data-plasmic-override={overrides.enableScriptDebug}
                    checkLabel={"Enable Script Debugging"}
                    className={classNames(
                      "__wab_instance",
                      sty.enableScriptDebug
                    )}
                    isChecked={
                      generateStateValueProp($state, [
                        "enableScriptDebug",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "enableScriptDebug",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />

                  <Checkbox
                    data-plasmic-name={"disableScriptDebug"}
                    data-plasmic-override={overrides.disableScriptDebug}
                    checkLabel={"Disable JavaScript Concatenation"}
                    className={classNames(
                      "__wab_instance",
                      sty.disableScriptDebug
                    )}
                    isChecked={
                      generateStateValueProp($state, [
                        "disableScriptDebug",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "disableScriptDebug",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />

                  <Checkbox
                    data-plasmic-name={"disablePostDebug"}
                    data-plasmic-override={overrides.disablePostDebug}
                    checkLabel={"Disable Post Revisions"}
                    className={classNames(
                      "__wab_instance",
                      sty.disablePostDebug
                    )}
                    isChecked={
                      generateStateValueProp($state, [
                        "disablePostDebug",
                        "isChecked"
                      ]) ?? false
                    }
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "disablePostDebug",
                        "isChecked"
                      ])(eventArgs[0]);
                    }}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"createSiteButton2"}
                  data-plasmic-override={overrides.createSiteButton2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.createSiteButton2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tcm4B
                    )}
                  >
                    {"Create Free Test Site"}
                  </div>
                </Stack__>
              </div>
            </div>
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml, {
              [sty.embedHtmlprocessingVarient]: hasVariant(
                $state,
                "processingVarient",
                "processingVarient"
              ),
              [sty.embedHtmlsetupVarient]: hasVariant(
                $state,
                "setupVarient",
                "setupVarient"
              )
            })}
            code={
              hasVariant(globalVariants, "screen", "bp966")
                ? "<style>\r\n  .home-contents-grid{\r\n    /* align-items:end; */\r\n  }\r\n\r\n  .selection_effect::selection {\r\n    color: #FC573B;\r\n    background: #FEF5F4;\r\n  }\r\n\r\n  .header{\r\n    padding-bottom: 26px;\r\n  }\r\n</style>\r\n"
                : "<style>\r\n  .home-contents-grid{\r\n    align-items:end;\r\n  }\r\n\r\n  .selection_effect::selection {\r\n    color: #FC573B;\r\n    background: #FEF5F4;\r\n  }\r\n\r\n  .header{\r\n    padding-bottom: 26px;\r\n  }\r\n  \r\n@media screen and (min-width: 1680px) {\r\n  .wp_img {\r\n    height:100vh  !important; \r\n    object-fit: contain;\r\n    \r\n  }\r\n\r\n  .wp_img > picture > img{\r\n    object-fit: contain;\r\n    object-position: bottom right;\r\n  }\r\n}\r\n\r\n</style>\r\n"
            }
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "additionalSeoData",
    "dummyWpContainer",
    "contents",
    "grid",
    "star1",
    "star2",
    "star3",
    "createSiteButton4",
    "dummyWpFooter",
    "processingContainer",
    "processing",
    "lottie",
    "envitiomentSetupContainer",
    "setupFormWrapper",
    "form",
    "titleWrapper",
    "dropdownWrapper",
    "checkboxWrapper",
    "enableWpDebug",
    "showWpDebug",
    "enableScriptDebug",
    "disableScriptDebug",
    "disablePostDebug",
    "createSiteButton2",
    "embedHtml"
  ],

  additionalSeoData: ["additionalSeoData"],
  dummyWpContainer: ["dummyWpContainer"],
  contents: [
    "contents",
    "grid",
    "star1",
    "star2",
    "star3",
    "createSiteButton4"
  ],

  grid: ["grid", "star1", "star2", "star3", "createSiteButton4"],
  star1: ["star1"],
  star2: ["star2"],
  star3: ["star3"],
  createSiteButton4: ["createSiteButton4"],
  dummyWpFooter: ["dummyWpFooter"],
  processingContainer: ["processingContainer", "processing", "lottie"],
  processing: ["processing", "lottie"],
  lottie: ["lottie"],
  envitiomentSetupContainer: [
    "envitiomentSetupContainer",
    "setupFormWrapper",
    "form",
    "titleWrapper",
    "dropdownWrapper",
    "checkboxWrapper",
    "enableWpDebug",
    "showWpDebug",
    "enableScriptDebug",
    "disableScriptDebug",
    "disablePostDebug",
    "createSiteButton2"
  ],

  setupFormWrapper: [
    "setupFormWrapper",
    "form",
    "titleWrapper",
    "dropdownWrapper",
    "checkboxWrapper",
    "enableWpDebug",
    "showWpDebug",
    "enableScriptDebug",
    "disableScriptDebug",
    "disablePostDebug",
    "createSiteButton2"
  ],

  form: [
    "form",
    "titleWrapper",
    "dropdownWrapper",
    "checkboxWrapper",
    "enableWpDebug",
    "showWpDebug",
    "enableScriptDebug",
    "disableScriptDebug",
    "disablePostDebug",
    "createSiteButton2"
  ],

  titleWrapper: ["titleWrapper"],
  dropdownWrapper: ["dropdownWrapper"],
  checkboxWrapper: [
    "checkboxWrapper",
    "enableWpDebug",
    "showWpDebug",
    "enableScriptDebug",
    "disableScriptDebug",
    "disablePostDebug"
  ],

  enableWpDebug: ["enableWpDebug"],
  showWpDebug: ["showWpDebug"],
  enableScriptDebug: ["enableScriptDebug"],
  disableScriptDebug: ["disableScriptDebug"],
  disablePostDebug: ["disablePostDebug"],
  createSiteButton2: ["createSiteButton2"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    additionalSeoData: makeNodeComponent("additionalSeoData"),
    dummyWpContainer: makeNodeComponent("dummyWpContainer"),
    contents: makeNodeComponent("contents"),
    grid: makeNodeComponent("grid"),
    star1: makeNodeComponent("star1"),
    star2: makeNodeComponent("star2"),
    star3: makeNodeComponent("star3"),
    createSiteButton4: makeNodeComponent("createSiteButton4"),
    dummyWpFooter: makeNodeComponent("dummyWpFooter"),
    processingContainer: makeNodeComponent("processingContainer"),
    processing: makeNodeComponent("processing"),
    lottie: makeNodeComponent("lottie"),
    envitiomentSetupContainer: makeNodeComponent("envitiomentSetupContainer"),
    setupFormWrapper: makeNodeComponent("setupFormWrapper"),
    form: makeNodeComponent("form"),
    titleWrapper: makeNodeComponent("titleWrapper"),
    dropdownWrapper: makeNodeComponent("dropdownWrapper"),
    checkboxWrapper: makeNodeComponent("checkboxWrapper"),
    enableWpDebug: makeNodeComponent("enableWpDebug"),
    showWpDebug: makeNodeComponent("showWpDebug"),
    enableScriptDebug: makeNodeComponent("enableScriptDebug"),
    disableScriptDebug: makeNodeComponent("disableScriptDebug"),
    disablePostDebug: makeNodeComponent("disablePostDebug"),
    createSiteButton2: makeNodeComponent("createSiteButton2"),
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Key-value metadata
    metadata: { msapplicationTileColor: "#da532c" },
    // Page metadata
    pageMetadata: {
      title: "dummywp | Free WordPress Staging Site",
      description:
        "Create free WordPress staging site where you can upload your own plugin and theme to test out things before you make it live on your main site.",
      ogImageSrc:
        "https://site-assets.plasmic.app/70bd5841dbee59b55a44fb215e176a76.png",
      canonical: "https://dwpv1.plasmic.run/"
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
